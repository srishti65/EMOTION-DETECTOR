# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hkjq363X5_BDW71hRlf_bvS56oeQ9HQ2
"""

pip install numpy pandas seaborn neattext scikit-learn joblib

"""SAMPLE EMOTION DATASET"""

import pandas as pd

# Example dataset
data = {
    'text': [
        'I am very happy today!',
        'This is so sad and depressing',
        'I am furious and angry at you',
        'Feeling joyful and blessed',
        'What a terrible experience',
        'I’m excited for the trip',
        'This is frustrating',
        'I feel so loved and peaceful',
        'I’m scared and anxious',
        'I can’t stop smiling'
    ],
    'emotion': [
        'happy', 'sad', 'angry', 'happy', 'sad',
        'happy', 'angry', 'happy', 'sad', 'happy'
    ]
}

df = pd.DataFrame(data)

import neattext.functions as nfx

# Clean text
df['clean_text'] = df['text'].apply(nfx.remove_stopwords)
df['clean_text'] = df['clean_text'].apply(nfx.remove_special_characters)

"""BUILD AND TRAIN MODEL"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import joblib

# Split
X = df['clean_text']
y = df['emotion']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Pipeline
model = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('classifier', MultinomialNB())
])

model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

joblib.dump(model, 'emotion_model.pkl')

"""LOAD MODEL"""

# Load model
loaded_model = joblib.load('emotion_model.pkl')

def detect_emotion(text):
    cleaned = nfx.remove_stopwords(nfx.remove_special_characters(text))
    prediction = loaded_model.predict([cleaned])[0]
    print(f"Detected Emotion: {prediction}")

# Try it
detect_emotion("I am so excited for the concert!")
detect_emotion("I hate this, it makes me angry")
detect_emotion("I feel really down and sad")

"""CONFUSION MATRIX"""

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred, labels=model.classes_)
sns.heatmap(cm, annot=True, xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

